//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AudioPlayerFrontendWpf.AudioServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="States", Namespace="http://schemas.datacontract.org/2004/07/AudioPlayerBackendLib")]
    [System.SerializableAttribute()]
    public partial struct States : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan DurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AudioPlayerFrontendWpf.AudioServiceReference.Hashes HashesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAllShuffleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsOnlySearchField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSearchShuffleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlayStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SearchKeyField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Duration {
            get {
                return this.DurationField;
            }
            set {
                if ((this.DurationField.Equals(value) != true)) {
                    this.DurationField = value;
                    this.RaisePropertyChanged("Duration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AudioPlayerFrontendWpf.AudioServiceReference.Hashes Hashes {
            get {
                return this.HashesField;
            }
            set {
                if ((this.HashesField.Equals(value) != true)) {
                    this.HashesField = value;
                    this.RaisePropertyChanged("Hashes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAllShuffle {
            get {
                return this.IsAllShuffleField;
            }
            set {
                if ((this.IsAllShuffleField.Equals(value) != true)) {
                    this.IsAllShuffleField = value;
                    this.RaisePropertyChanged("IsAllShuffle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsOnlySearch {
            get {
                return this.IsOnlySearchField;
            }
            set {
                if ((this.IsOnlySearchField.Equals(value) != true)) {
                    this.IsOnlySearchField = value;
                    this.RaisePropertyChanged("IsOnlySearch");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSearchShuffle {
            get {
                return this.IsSearchShuffleField;
            }
            set {
                if ((this.IsSearchShuffleField.Equals(value) != true)) {
                    this.IsSearchShuffleField = value;
                    this.RaisePropertyChanged("IsSearchShuffle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string PlayState {
            get {
                return this.PlayStateField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayStateField, value) != true)) {
                    this.PlayStateField = value;
                    this.RaisePropertyChanged("PlayState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SearchKey {
            get {
                return this.SearchKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.SearchKeyField, value) != true)) {
                    this.SearchKeyField = value;
                    this.RaisePropertyChanged("SearchKey");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Hashes", Namespace="http://schemas.datacontract.org/2004/07/AudioPlayerBackendLib")]
    [System.SerializableAttribute()]
    public partial struct Hashes : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AllSongsHashField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CurrentSongHashField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MediaSourcesHashField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SearchSongsHashField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AllSongsHash {
            get {
                return this.AllSongsHashField;
            }
            set {
                if ((this.AllSongsHashField.Equals(value) != true)) {
                    this.AllSongsHashField = value;
                    this.RaisePropertyChanged("AllSongsHash");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CurrentSongHash {
            get {
                return this.CurrentSongHashField;
            }
            set {
                if ((this.CurrentSongHashField.Equals(value) != true)) {
                    this.CurrentSongHashField = value;
                    this.RaisePropertyChanged("CurrentSongHash");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MediaSourcesHash {
            get {
                return this.MediaSourcesHashField;
            }
            set {
                if ((this.MediaSourcesHashField.Equals(value) != true)) {
                    this.MediaSourcesHashField = value;
                    this.RaisePropertyChanged("MediaSourcesHash");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SearchSongsHash {
            get {
                return this.SearchSongsHashField;
            }
            set {
                if ((this.SearchSongsHashField.Equals(value) != true)) {
                    this.SearchSongsHashField = value;
                    this.RaisePropertyChanged("SearchSongsHash");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Song", Namespace="http://schemas.datacontract.org/2004/07/AudioPlayerBackendLib")]
    [System.SerializableAttribute()]
    public partial struct Song : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ArtistField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FullPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IndexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Artist {
            get {
                return this.ArtistField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtistField, value) != true)) {
                    this.ArtistField = value;
                    this.RaisePropertyChanged("Artist");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullPath {
            get {
                return this.FullPathField;
            }
            set {
                if ((object.ReferenceEquals(this.FullPathField, value) != true)) {
                    this.FullPathField = value;
                    this.RaisePropertyChanged("FullPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Index {
            get {
                return this.IndexField;
            }
            set {
                if ((this.IndexField.Equals(value) != true)) {
                    this.IndexField = value;
                    this.RaisePropertyChanged("Index");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AudioServiceReference.IAudioService")]
    public interface IAudioService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/GetDebugInfo", ReplyAction="http://tempuri.org/IAudioService/GetDebugInfoResponse")]
        string GetDebugInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/GetDebugInfo", ReplyAction="http://tempuri.org/IAudioService/GetDebugInfoResponse")]
        System.Threading.Tasks.Task<string> GetDebugInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/GetStates", ReplyAction="http://tempuri.org/IAudioService/GetStatesResponse")]
        AudioPlayerFrontendWpf.AudioServiceReference.States GetStates();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/GetStates", ReplyAction="http://tempuri.org/IAudioService/GetStatesResponse")]
        System.Threading.Tasks.Task<AudioPlayerFrontendWpf.AudioServiceReference.States> GetStatesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/GetPositon", ReplyAction="http://tempuri.org/IAudioService/GetPositonResponse")]
        System.TimeSpan GetPositon();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/GetPositon", ReplyAction="http://tempuri.org/IAudioService/GetPositonResponse")]
        System.Threading.Tasks.Task<System.TimeSpan> GetPositonAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/SetPosition", ReplyAction="http://tempuri.org/IAudioService/SetPositionResponse")]
        void SetPosition(System.TimeSpan position);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/SetPosition", ReplyAction="http://tempuri.org/IAudioService/SetPositionResponse")]
        System.Threading.Tasks.Task SetPositionAsync(System.TimeSpan position);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/GetDuration", ReplyAction="http://tempuri.org/IAudioService/GetDurationResponse")]
        System.TimeSpan GetDuration();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/GetDuration", ReplyAction="http://tempuri.org/IAudioService/GetDurationResponse")]
        System.Threading.Tasks.Task<System.TimeSpan> GetDurationAsync();
        
        // CODEGEN: Es wird ein Nachrichtenvertrag generiert, da Elementname GetPlayStateResult aus Namespace http://tempuri.org/ nicht als "nillable" (nullwertfähig) gekennzeichnet ist.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/GetPlayState", ReplyAction="http://tempuri.org/IAudioService/GetPlayStateResponse")]
        AudioPlayerFrontendWpf.AudioServiceReference.GetPlayStateResponse GetPlayState(AudioPlayerFrontendWpf.AudioServiceReference.GetPlayStateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/GetPlayState", ReplyAction="http://tempuri.org/IAudioService/GetPlayStateResponse")]
        System.Threading.Tasks.Task<AudioPlayerFrontendWpf.AudioServiceReference.GetPlayStateResponse> GetPlayStateAsync(AudioPlayerFrontendWpf.AudioServiceReference.GetPlayStateRequest request);
        
        // CODEGEN: Es wird ein Nachrichtenvertrag generiert, da Elementname state aus Namespace http://tempuri.org/ nicht als "nillable" (nullwertfähig) gekennzeichnet ist.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/SetPlayState", ReplyAction="http://tempuri.org/IAudioService/SetPlayStateResponse")]
        AudioPlayerFrontendWpf.AudioServiceReference.SetPlayStateResponse SetPlayState(AudioPlayerFrontendWpf.AudioServiceReference.SetPlayStateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/SetPlayState", ReplyAction="http://tempuri.org/IAudioService/SetPlayStateResponse")]
        System.Threading.Tasks.Task<AudioPlayerFrontendWpf.AudioServiceReference.SetPlayStateResponse> SetPlayStateAsync(AudioPlayerFrontendWpf.AudioServiceReference.SetPlayStateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/Play", ReplyAction="http://tempuri.org/IAudioService/PlayResponse")]
        void Play();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/Play", ReplyAction="http://tempuri.org/IAudioService/PlayResponse")]
        System.Threading.Tasks.Task PlayAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/Pause", ReplyAction="http://tempuri.org/IAudioService/PauseResponse")]
        void Pause();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/Pause", ReplyAction="http://tempuri.org/IAudioService/PauseResponse")]
        System.Threading.Tasks.Task PauseAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/Stop", ReplyAction="http://tempuri.org/IAudioService/StopResponse")]
        void Stop();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/Stop", ReplyAction="http://tempuri.org/IAudioService/StopResponse")]
        System.Threading.Tasks.Task StopAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/GetIsAllShuffle", ReplyAction="http://tempuri.org/IAudioService/GetIsAllShuffleResponse")]
        bool GetIsAllShuffle();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/GetIsAllShuffle", ReplyAction="http://tempuri.org/IAudioService/GetIsAllShuffleResponse")]
        System.Threading.Tasks.Task<bool> GetIsAllShuffleAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/SetIsAllShuffle", ReplyAction="http://tempuri.org/IAudioService/SetIsAllShuffleResponse")]
        void SetIsAllShuffle(bool isAllShuffle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/SetIsAllShuffle", ReplyAction="http://tempuri.org/IAudioService/SetIsAllShuffleResponse")]
        System.Threading.Tasks.Task SetIsAllShuffleAsync(bool isAllShuffle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/GetIsSearchShuffle", ReplyAction="http://tempuri.org/IAudioService/GetIsSearchShuffleResponse")]
        bool GetIsSearchShuffle();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/GetIsSearchShuffle", ReplyAction="http://tempuri.org/IAudioService/GetIsSearchShuffleResponse")]
        System.Threading.Tasks.Task<bool> GetIsSearchShuffleAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/SetIsSearchShuffle", ReplyAction="http://tempuri.org/IAudioService/SetIsSearchShuffleResponse")]
        void SetIsSearchShuffle(bool isSearchShuffle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/SetIsSearchShuffle", ReplyAction="http://tempuri.org/IAudioService/SetIsSearchShuffleResponse")]
        System.Threading.Tasks.Task SetIsSearchShuffleAsync(bool isSearchShuffle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/GetIsOnlySearch", ReplyAction="http://tempuri.org/IAudioService/GetIsOnlySearchResponse")]
        bool GetIsOnlySearch();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/GetIsOnlySearch", ReplyAction="http://tempuri.org/IAudioService/GetIsOnlySearchResponse")]
        System.Threading.Tasks.Task<bool> GetIsOnlySearchAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/SetIsOnlySearch", ReplyAction="http://tempuri.org/IAudioService/SetIsOnlySearchResponse")]
        void SetIsOnlySearch(bool isOnlySearch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/SetIsOnlySearch", ReplyAction="http://tempuri.org/IAudioService/SetIsOnlySearchResponse")]
        System.Threading.Tasks.Task SetIsOnlySearchAsync(bool isOnlySearch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/GetSearchKey", ReplyAction="http://tempuri.org/IAudioService/GetSearchKeyResponse")]
        string GetSearchKey();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/GetSearchKey", ReplyAction="http://tempuri.org/IAudioService/GetSearchKeyResponse")]
        System.Threading.Tasks.Task<string> GetSearchKeyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/SetSearchKey", ReplyAction="http://tempuri.org/IAudioService/SetSearchKeyResponse")]
        void SetSearchKey(string searchKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/SetSearchKey", ReplyAction="http://tempuri.org/IAudioService/SetSearchKeyResponse")]
        System.Threading.Tasks.Task SetSearchKeyAsync(string searchKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/GetMediaSources", ReplyAction="http://tempuri.org/IAudioService/GetMediaSourcesResponse")]
        string[] GetMediaSources();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/GetMediaSources", ReplyAction="http://tempuri.org/IAudioService/GetMediaSourcesResponse")]
        System.Threading.Tasks.Task<string[]> GetMediaSourcesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/SetMediaSources", ReplyAction="http://tempuri.org/IAudioService/SetMediaSourcesResponse")]
        void SetMediaSources(string[] sources);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/SetMediaSources", ReplyAction="http://tempuri.org/IAudioService/SetMediaSourcesResponse")]
        System.Threading.Tasks.Task SetMediaSourcesAsync(string[] sources);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/GetCurrentSong", ReplyAction="http://tempuri.org/IAudioService/GetCurrentSongResponse")]
        AudioPlayerFrontendWpf.AudioServiceReference.Song GetCurrentSong();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/GetCurrentSong", ReplyAction="http://tempuri.org/IAudioService/GetCurrentSongResponse")]
        System.Threading.Tasks.Task<AudioPlayerFrontendWpf.AudioServiceReference.Song> GetCurrentSongAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/SetCurrentSong", ReplyAction="http://tempuri.org/IAudioService/SetCurrentSongResponse")]
        void SetCurrentSong(AudioPlayerFrontendWpf.AudioServiceReference.Song song);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/SetCurrentSong", ReplyAction="http://tempuri.org/IAudioService/SetCurrentSongResponse")]
        System.Threading.Tasks.Task SetCurrentSongAsync(AudioPlayerFrontendWpf.AudioServiceReference.Song song);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/GetAllSongs", ReplyAction="http://tempuri.org/IAudioService/GetAllSongsResponse")]
        AudioPlayerFrontendWpf.AudioServiceReference.Song[] GetAllSongs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/GetAllSongs", ReplyAction="http://tempuri.org/IAudioService/GetAllSongsResponse")]
        System.Threading.Tasks.Task<AudioPlayerFrontendWpf.AudioServiceReference.Song[]> GetAllSongsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/GetSearchSongs", ReplyAction="http://tempuri.org/IAudioService/GetSearchSongsResponse")]
        AudioPlayerFrontendWpf.AudioServiceReference.Song[] GetSearchSongs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/GetSearchSongs", ReplyAction="http://tempuri.org/IAudioService/GetSearchSongsResponse")]
        System.Threading.Tasks.Task<AudioPlayerFrontendWpf.AudioServiceReference.Song[]> GetSearchSongsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/Next", ReplyAction="http://tempuri.org/IAudioService/NextResponse")]
        void Next();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/Next", ReplyAction="http://tempuri.org/IAudioService/NextResponse")]
        System.Threading.Tasks.Task NextAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/Previous", ReplyAction="http://tempuri.org/IAudioService/PreviousResponse")]
        void Previous();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/Previous", ReplyAction="http://tempuri.org/IAudioService/PreviousResponse")]
        System.Threading.Tasks.Task PreviousAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/Refresh", ReplyAction="http://tempuri.org/IAudioService/RefreshResponse")]
        void Refresh();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/Refresh", ReplyAction="http://tempuri.org/IAudioService/RefreshResponse")]
        System.Threading.Tasks.Task RefreshAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/CloseInstance", ReplyAction="http://tempuri.org/IAudioService/CloseInstanceResponse")]
        void CloseInstance();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioService/CloseInstance", ReplyAction="http://tempuri.org/IAudioService/CloseInstanceResponse")]
        System.Threading.Tasks.Task CloseInstanceAsync();
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetPlayStateRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetPlayState", Namespace="http://tempuri.org/", Order=0)]
        public AudioPlayerFrontendWpf.AudioServiceReference.GetPlayStateRequestBody Body;
        
        public GetPlayStateRequest() {
        }
        
        public GetPlayStateRequest(AudioPlayerFrontendWpf.AudioServiceReference.GetPlayStateRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute()]
    public partial class GetPlayStateRequestBody {
        
        public GetPlayStateRequestBody() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetPlayStateResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetPlayStateResponse", Namespace="http://tempuri.org/", Order=0)]
        public AudioPlayerFrontendWpf.AudioServiceReference.GetPlayStateResponseBody Body;
        
        public GetPlayStateResponse() {
        }
        
        public GetPlayStateResponse(AudioPlayerFrontendWpf.AudioServiceReference.GetPlayStateResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class GetPlayStateResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string GetPlayStateResult;
        
        public GetPlayStateResponseBody() {
        }
        
        public GetPlayStateResponseBody(string GetPlayStateResult) {
            this.GetPlayStateResult = GetPlayStateResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SetPlayStateRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="SetPlayState", Namespace="http://tempuri.org/", Order=0)]
        public AudioPlayerFrontendWpf.AudioServiceReference.SetPlayStateRequestBody Body;
        
        public SetPlayStateRequest() {
        }
        
        public SetPlayStateRequest(AudioPlayerFrontendWpf.AudioServiceReference.SetPlayStateRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class SetPlayStateRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string state;
        
        public SetPlayStateRequestBody() {
        }
        
        public SetPlayStateRequestBody(string state) {
            this.state = state;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SetPlayStateResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="SetPlayStateResponse", Namespace="http://tempuri.org/", Order=0)]
        public AudioPlayerFrontendWpf.AudioServiceReference.SetPlayStateResponseBody Body;
        
        public SetPlayStateResponse() {
        }
        
        public SetPlayStateResponse(AudioPlayerFrontendWpf.AudioServiceReference.SetPlayStateResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute()]
    public partial class SetPlayStateResponseBody {
        
        public SetPlayStateResponseBody() {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAudioServiceChannel : AudioPlayerFrontendWpf.AudioServiceReference.IAudioService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AudioServiceClient : System.ServiceModel.ClientBase<AudioPlayerFrontendWpf.AudioServiceReference.IAudioService>, AudioPlayerFrontendWpf.AudioServiceReference.IAudioService {
        
        public AudioServiceClient() {
        }
        
        public AudioServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AudioServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AudioServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AudioServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetDebugInfo() {
            return base.Channel.GetDebugInfo();
        }
        
        public System.Threading.Tasks.Task<string> GetDebugInfoAsync() {
            return base.Channel.GetDebugInfoAsync();
        }
        
        public AudioPlayerFrontendWpf.AudioServiceReference.States GetStates() {
            return base.Channel.GetStates();
        }
        
        public System.Threading.Tasks.Task<AudioPlayerFrontendWpf.AudioServiceReference.States> GetStatesAsync() {
            return base.Channel.GetStatesAsync();
        }
        
        public System.TimeSpan GetPositon() {
            return base.Channel.GetPositon();
        }
        
        public System.Threading.Tasks.Task<System.TimeSpan> GetPositonAsync() {
            return base.Channel.GetPositonAsync();
        }
        
        public void SetPosition(System.TimeSpan position) {
            base.Channel.SetPosition(position);
        }
        
        public System.Threading.Tasks.Task SetPositionAsync(System.TimeSpan position) {
            return base.Channel.SetPositionAsync(position);
        }
        
        public System.TimeSpan GetDuration() {
            return base.Channel.GetDuration();
        }
        
        public System.Threading.Tasks.Task<System.TimeSpan> GetDurationAsync() {
            return base.Channel.GetDurationAsync();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        AudioPlayerFrontendWpf.AudioServiceReference.GetPlayStateResponse AudioPlayerFrontendWpf.AudioServiceReference.IAudioService.GetPlayState(AudioPlayerFrontendWpf.AudioServiceReference.GetPlayStateRequest request) {
            return base.Channel.GetPlayState(request);
        }
        
        public string GetPlayState() {
            AudioPlayerFrontendWpf.AudioServiceReference.GetPlayStateRequest inValue = new AudioPlayerFrontendWpf.AudioServiceReference.GetPlayStateRequest();
            inValue.Body = new AudioPlayerFrontendWpf.AudioServiceReference.GetPlayStateRequestBody();
            AudioPlayerFrontendWpf.AudioServiceReference.GetPlayStateResponse retVal = ((AudioPlayerFrontendWpf.AudioServiceReference.IAudioService)(this)).GetPlayState(inValue);
            return retVal.Body.GetPlayStateResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<AudioPlayerFrontendWpf.AudioServiceReference.GetPlayStateResponse> AudioPlayerFrontendWpf.AudioServiceReference.IAudioService.GetPlayStateAsync(AudioPlayerFrontendWpf.AudioServiceReference.GetPlayStateRequest request) {
            return base.Channel.GetPlayStateAsync(request);
        }
        
        public System.Threading.Tasks.Task<AudioPlayerFrontendWpf.AudioServiceReference.GetPlayStateResponse> GetPlayStateAsync() {
            AudioPlayerFrontendWpf.AudioServiceReference.GetPlayStateRequest inValue = new AudioPlayerFrontendWpf.AudioServiceReference.GetPlayStateRequest();
            inValue.Body = new AudioPlayerFrontendWpf.AudioServiceReference.GetPlayStateRequestBody();
            return ((AudioPlayerFrontendWpf.AudioServiceReference.IAudioService)(this)).GetPlayStateAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        AudioPlayerFrontendWpf.AudioServiceReference.SetPlayStateResponse AudioPlayerFrontendWpf.AudioServiceReference.IAudioService.SetPlayState(AudioPlayerFrontendWpf.AudioServiceReference.SetPlayStateRequest request) {
            return base.Channel.SetPlayState(request);
        }
        
        public void SetPlayState(string state) {
            AudioPlayerFrontendWpf.AudioServiceReference.SetPlayStateRequest inValue = new AudioPlayerFrontendWpf.AudioServiceReference.SetPlayStateRequest();
            inValue.Body = new AudioPlayerFrontendWpf.AudioServiceReference.SetPlayStateRequestBody();
            inValue.Body.state = state;
            AudioPlayerFrontendWpf.AudioServiceReference.SetPlayStateResponse retVal = ((AudioPlayerFrontendWpf.AudioServiceReference.IAudioService)(this)).SetPlayState(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<AudioPlayerFrontendWpf.AudioServiceReference.SetPlayStateResponse> AudioPlayerFrontendWpf.AudioServiceReference.IAudioService.SetPlayStateAsync(AudioPlayerFrontendWpf.AudioServiceReference.SetPlayStateRequest request) {
            return base.Channel.SetPlayStateAsync(request);
        }
        
        public System.Threading.Tasks.Task<AudioPlayerFrontendWpf.AudioServiceReference.SetPlayStateResponse> SetPlayStateAsync(string state) {
            AudioPlayerFrontendWpf.AudioServiceReference.SetPlayStateRequest inValue = new AudioPlayerFrontendWpf.AudioServiceReference.SetPlayStateRequest();
            inValue.Body = new AudioPlayerFrontendWpf.AudioServiceReference.SetPlayStateRequestBody();
            inValue.Body.state = state;
            return ((AudioPlayerFrontendWpf.AudioServiceReference.IAudioService)(this)).SetPlayStateAsync(inValue);
        }
        
        public void Play() {
            base.Channel.Play();
        }
        
        public System.Threading.Tasks.Task PlayAsync() {
            return base.Channel.PlayAsync();
        }
        
        public void Pause() {
            base.Channel.Pause();
        }
        
        public System.Threading.Tasks.Task PauseAsync() {
            return base.Channel.PauseAsync();
        }
        
        public void Stop() {
            base.Channel.Stop();
        }
        
        public System.Threading.Tasks.Task StopAsync() {
            return base.Channel.StopAsync();
        }
        
        public bool GetIsAllShuffle() {
            return base.Channel.GetIsAllShuffle();
        }
        
        public System.Threading.Tasks.Task<bool> GetIsAllShuffleAsync() {
            return base.Channel.GetIsAllShuffleAsync();
        }
        
        public void SetIsAllShuffle(bool isAllShuffle) {
            base.Channel.SetIsAllShuffle(isAllShuffle);
        }
        
        public System.Threading.Tasks.Task SetIsAllShuffleAsync(bool isAllShuffle) {
            return base.Channel.SetIsAllShuffleAsync(isAllShuffle);
        }
        
        public bool GetIsSearchShuffle() {
            return base.Channel.GetIsSearchShuffle();
        }
        
        public System.Threading.Tasks.Task<bool> GetIsSearchShuffleAsync() {
            return base.Channel.GetIsSearchShuffleAsync();
        }
        
        public void SetIsSearchShuffle(bool isSearchShuffle) {
            base.Channel.SetIsSearchShuffle(isSearchShuffle);
        }
        
        public System.Threading.Tasks.Task SetIsSearchShuffleAsync(bool isSearchShuffle) {
            return base.Channel.SetIsSearchShuffleAsync(isSearchShuffle);
        }
        
        public bool GetIsOnlySearch() {
            return base.Channel.GetIsOnlySearch();
        }
        
        public System.Threading.Tasks.Task<bool> GetIsOnlySearchAsync() {
            return base.Channel.GetIsOnlySearchAsync();
        }
        
        public void SetIsOnlySearch(bool isOnlySearch) {
            base.Channel.SetIsOnlySearch(isOnlySearch);
        }
        
        public System.Threading.Tasks.Task SetIsOnlySearchAsync(bool isOnlySearch) {
            return base.Channel.SetIsOnlySearchAsync(isOnlySearch);
        }
        
        public string GetSearchKey() {
            return base.Channel.GetSearchKey();
        }
        
        public System.Threading.Tasks.Task<string> GetSearchKeyAsync() {
            return base.Channel.GetSearchKeyAsync();
        }
        
        public void SetSearchKey(string searchKey) {
            base.Channel.SetSearchKey(searchKey);
        }
        
        public System.Threading.Tasks.Task SetSearchKeyAsync(string searchKey) {
            return base.Channel.SetSearchKeyAsync(searchKey);
        }
        
        public string[] GetMediaSources() {
            return base.Channel.GetMediaSources();
        }
        
        public System.Threading.Tasks.Task<string[]> GetMediaSourcesAsync() {
            return base.Channel.GetMediaSourcesAsync();
        }
        
        public void SetMediaSources(string[] sources) {
            base.Channel.SetMediaSources(sources);
        }
        
        public System.Threading.Tasks.Task SetMediaSourcesAsync(string[] sources) {
            return base.Channel.SetMediaSourcesAsync(sources);
        }
        
        public AudioPlayerFrontendWpf.AudioServiceReference.Song GetCurrentSong() {
            return base.Channel.GetCurrentSong();
        }
        
        public System.Threading.Tasks.Task<AudioPlayerFrontendWpf.AudioServiceReference.Song> GetCurrentSongAsync() {
            return base.Channel.GetCurrentSongAsync();
        }
        
        public void SetCurrentSong(AudioPlayerFrontendWpf.AudioServiceReference.Song song) {
            base.Channel.SetCurrentSong(song);
        }
        
        public System.Threading.Tasks.Task SetCurrentSongAsync(AudioPlayerFrontendWpf.AudioServiceReference.Song song) {
            return base.Channel.SetCurrentSongAsync(song);
        }
        
        public AudioPlayerFrontendWpf.AudioServiceReference.Song[] GetAllSongs() {
            return base.Channel.GetAllSongs();
        }
        
        public System.Threading.Tasks.Task<AudioPlayerFrontendWpf.AudioServiceReference.Song[]> GetAllSongsAsync() {
            return base.Channel.GetAllSongsAsync();
        }
        
        public AudioPlayerFrontendWpf.AudioServiceReference.Song[] GetSearchSongs() {
            return base.Channel.GetSearchSongs();
        }
        
        public System.Threading.Tasks.Task<AudioPlayerFrontendWpf.AudioServiceReference.Song[]> GetSearchSongsAsync() {
            return base.Channel.GetSearchSongsAsync();
        }
        
        public void Next() {
            base.Channel.Next();
        }
        
        public System.Threading.Tasks.Task NextAsync() {
            return base.Channel.NextAsync();
        }
        
        public void Previous() {
            base.Channel.Previous();
        }
        
        public System.Threading.Tasks.Task PreviousAsync() {
            return base.Channel.PreviousAsync();
        }
        
        public void Refresh() {
            base.Channel.Refresh();
        }
        
        public System.Threading.Tasks.Task RefreshAsync() {
            return base.Channel.RefreshAsync();
        }
        
        public void CloseInstance() {
            base.Channel.CloseInstance();
        }
        
        public System.Threading.Tasks.Task CloseInstanceAsync() {
            return base.Channel.CloseInstanceAsync();
        }
    }
}
